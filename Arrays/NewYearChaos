#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'minimumBribes' function below.
 *
 * The function accepts INTEGER_ARRAY q as parameter.
 */
 

void sort(vector<int> &sortedAr, int elem) {
    if (sortedAr.empty()) sortedAr.push_back(elem);
    if (sortedAr[sortedAr.size() - 1] < elem) sortedAr.push_back(elem);
    for (int i = 0; i < sortedAr.size(); i++) {
        if (sortedAr[i] > elem) {
            sortedAr.insert(sortedAr.begin() + i, elem);
            return;
        }
    }
}

int findPos(vector<int> &sortedAr, int elem) {
    int pos = 0;
    if (sortedAr.empty() == false) {
        if (sortedAr[0] > elem) return 0;
        else {
            pos++;
            for (int i = 1; i < sortedAr.size(); i++) {
                if (sortedAr[i] > elem) return pos;
                pos++;
            }
            return pos;
        }
    }
    else return 0;
    
}

void minimumBribes(vector<int> q) {
    int output = 0;
    bool chaotic = false;
    int ascNumbersSeen = 0;
    vector<int> sortedAr;

    for (int i = q.size() - 1; i >= 0; i--) {
        int whereToPlace = findPos(sortedAr, q[i]);
        if (whereToPlace != 0) {
            output += whereToPlace;
            if (whereToPlace > 2) {
                std::cout<<"Too chaotic\n";
                return;
            }
        }
        sort(sortedAr, q[i]);
        
    }
    
    std::cout<<output<<"\n";
    return;
}

int main()
{
    string t_temp;
    getline(cin, t_temp);

    int t = stoi(ltrim(rtrim(t_temp)));

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string n_temp;
        getline(cin, n_temp);

        int n = stoi(ltrim(rtrim(n_temp)));

        string q_temp_temp;
        getline(cin, q_temp_temp);

        vector<string> q_temp = split(rtrim(q_temp_temp));

        vector<int> q(n);

        for (int i = 0; i < n; i++) {
            int q_item = stoi(q_temp[i]);

            q[i] = q_item;
        }

        minimumBribes(q);
    }

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
